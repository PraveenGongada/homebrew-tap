# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Catalyst < Formula
  desc "Terminal UI tool to simplify triggering GitHub Actions workflows with matrix configurations"
  homepage "https://github.com/PraveenGongada/catalyst"
  version "1.1.0"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/PraveenGongada/catalyst/releases/download/v1.1.0/catalyst_Darwin_x86_64.tar.gz"
      sha256 "5a387baba588a1f40d479fc6a4a7ce30db0ec7be64bcf0953101bdc6ff26ba6b"

      def install
        bin.install "catalyst"

        # Install completion scripts if the command exists
        if Utils.safe_popen_read(bin/"catalyst", "-help").include?("completion")
          bash_output = Utils.safe_popen_read(bin/"catalyst", "completion", "bash") rescue ""
          (bash_completion/"catalyst").write bash_output unless bash_output.empty?

          zsh_output = Utils.safe_popen_read(bin/"catalyst", "completion", "zsh") rescue ""
          (zsh_completion/"_catalyst").write zsh_output unless zsh_output.empty?

          fish_output = Utils.safe_popen_read(bin/"catalyst", "completion", "fish") rescue ""
          (fish_completion/"catalyst.fish").write fish_output unless fish_output.empty?
        end
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/PraveenGongada/catalyst/releases/download/v1.1.0/catalyst_Darwin_arm64.tar.gz"
      sha256 "240ac3b597b857a0ce9bf314027c90f3c2748d68a6ba6e9110281d1f6efa9e4f"

      def install
        bin.install "catalyst"

        # Install completion scripts if the command exists
        if Utils.safe_popen_read(bin/"catalyst", "-help").include?("completion")
          bash_output = Utils.safe_popen_read(bin/"catalyst", "completion", "bash") rescue ""
          (bash_completion/"catalyst").write bash_output unless bash_output.empty?

          zsh_output = Utils.safe_popen_read(bin/"catalyst", "completion", "zsh") rescue ""
          (zsh_completion/"_catalyst").write zsh_output unless zsh_output.empty?

          fish_output = Utils.safe_popen_read(bin/"catalyst", "completion", "fish") rescue ""
          (fish_completion/"catalyst.fish").write fish_output unless fish_output.empty?
        end
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/PraveenGongada/catalyst/releases/download/v1.1.0/catalyst_Linux_x86_64.tar.gz"
      sha256 "727daeadbd43e986094475abb6b781b2cf73ea1ebc47d17b1c976902610073bd"
      def install
        bin.install "catalyst"

        # Install completion scripts if the command exists
        if Utils.safe_popen_read(bin/"catalyst", "-help").include?("completion")
          bash_output = Utils.safe_popen_read(bin/"catalyst", "completion", "bash") rescue ""
          (bash_completion/"catalyst").write bash_output unless bash_output.empty?

          zsh_output = Utils.safe_popen_read(bin/"catalyst", "completion", "zsh") rescue ""
          (zsh_completion/"_catalyst").write zsh_output unless zsh_output.empty?

          fish_output = Utils.safe_popen_read(bin/"catalyst", "completion", "fish") rescue ""
          (fish_completion/"catalyst.fish").write fish_output unless fish_output.empty?
        end
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/PraveenGongada/catalyst/releases/download/v1.1.0/catalyst_Linux_arm64.tar.gz"
      sha256 "18fb86a159d4a7a797c7e0abbf3d6a91f0d517c120b7af16d8bb9aa5c20e3fc6"
      def install
        bin.install "catalyst"

        # Install completion scripts if the command exists
        if Utils.safe_popen_read(bin/"catalyst", "-help").include?("completion")
          bash_output = Utils.safe_popen_read(bin/"catalyst", "completion", "bash") rescue ""
          (bash_completion/"catalyst").write bash_output unless bash_output.empty?

          zsh_output = Utils.safe_popen_read(bin/"catalyst", "completion", "zsh") rescue ""
          (zsh_completion/"_catalyst").write zsh_output unless zsh_output.empty?

          fish_output = Utils.safe_popen_read(bin/"catalyst", "completion", "fish") rescue ""
          (fish_completion/"catalyst.fish").write fish_output unless fish_output.empty?
        end
      end
    end
  end

  test do
    system "#{bin}/catalyst", "-version"
  end
end
